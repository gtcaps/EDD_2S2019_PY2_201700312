/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Views;

/**
 *
 * @author aybso
 */
import Main.Archivo;
import static Main.Main.*;
import Main.Usuario;
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.DirectoryStream.Filter;
import java.nio.file.Files;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreeSelectionModel;
import structures.graph.Directorio;

public class UserDashboard extends javax.swing.JFrame {

    //----------------------
    private DefaultMutableTreeNode selectedNode;
    private Directorio directorioUsuario;

    //----------------------
    public UserDashboard() {

        directorioUsuario = user.getDirectorio();

        initComponents();
        setLocationRelativeTo(null);
        lblUser.setText(user.getUsuario().toUpperCase());

        treeFolders.setEditable(true);
        selectedNode = (DefaultMutableTreeNode) treeFolders.getModel().getRoot();
        selectedNode = (DefaultMutableTreeNode) selectedNode.getRoot();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuReports = new javax.swing.JPopupMenu();
        optGraph1 = new javax.swing.JMenuItem();
        optGraphBitacora = new javax.swing.JMenuItem();
        opcReporteMatriz = new javax.swing.JMenuItem();
        opcReporteHash = new javax.swing.JMenuItem();
        opcReporteArchivos = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblUser = new javax.swing.JLabel();
        btnLogOff = new java.awt.Button();
        jScrollPane1 = new javax.swing.JScrollPane();
        Icon closedIcon = new javax.swing.ImageIcon(getClass().getResource("/images/file.png"));
        Icon leafIcon = new javax.swing.ImageIcon(getClass().getResource("/images/file.png"));
        Icon openIcon = new javax.swing.ImageIcon(getClass().getResource("/images/file.png"));
        treeFolders = new javax.swing.JTree(directorioUsuario.getTreeRoot());
        lbl = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        btnEliminarFolder = new java.awt.Button();
        btnCrearFolder = new java.awt.Button();
        btnModificarFolder = new java.awt.Button();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        btnEliminarArchivo = new java.awt.Button();
        btnCrearArchivo = new java.awt.Button();
        btnAbrirArchivo = new java.awt.Button();
        btnCompartirArchivo = new java.awt.Button();
        btnModificarArchivo = new java.awt.Button();
        btnDescargarArchivo = new java.awt.Button();
        txtCarga = new javax.swing.JLabel();

        optGraph1.setText("Reporte Directorio (Grafo)");
        optGraph1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                optGraph1MousePressed(evt);
            }
        });
        menuReports.add(optGraph1);

        optGraphBitacora.setText("Reporte Bitacora (Pila)");
        optGraphBitacora.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                optGraphBitacoraMousePressed(evt);
            }
        });
        menuReports.add(optGraphBitacora);

        opcReporteMatriz.setText("Reporte Matriz Adyacencia");
        opcReporteMatriz.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                opcReporteMatrizMousePressed(evt);
            }
        });
        menuReports.add(opcReporteMatriz);

        opcReporteHash.setText("Reporte Tabla Hash");
        opcReporteHash.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                opcReporteHashMousePressed(evt);
            }
        });
        menuReports.add(opcReporteHash);

        opcReporteArchivos.setText("Reporte Archivos (AVL)");
        opcReporteArchivos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                opcReporteArchivosMousePressed(evt);
            }
        });
        menuReports.add(opcReporteArchivos);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(1200, 800));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jPanel1MouseReleased(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(153, 153, 153));
        jLabel1.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("EDD DRIVE /");

        lblUser.setBackground(new java.awt.Color(153, 153, 153));
        lblUser.setFont(new java.awt.Font("Segoe UI Light", 1, 18)); // NOI18N
        lblUser.setForeground(new java.awt.Color(41, 168, 73));
        lblUser.setText("USER");

        btnLogOff.setActionCommand("Log Off");
        btnLogOff.setBackground(new java.awt.Color(255, 102, 102));
        btnLogOff.setFont(new java.awt.Font("Segoe UI Light", 0, 12)); // NOI18N
        btnLogOff.setForeground(new java.awt.Color(255, 255, 255));
        btnLogOff.setLabel("Log Off");
        btnLogOff.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLogOffMouseClicked(evt);
            }
        });

        DefaultTreeCellRenderer renderer = (DefaultTreeCellRenderer) treeFolders.getCellRenderer();
        renderer.setLeafIcon(leafIcon);
        renderer.setOpenIcon(openIcon);
        renderer.setClosedIcon(closedIcon);
        renderer.updateUI();
        treeFolders.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                treeFoldersMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(treeFolders);

        lbl.setFont(new java.awt.Font("Segoe UI Light", 0, 18)); // NOI18N
        lbl.setForeground(new java.awt.Color(41, 168, 73));
        lbl.setText("/");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jPanel2.setToolTipText("");
        jPanel2.setPreferredSize(new java.awt.Dimension(463, 221));

        jLabel2.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 153, 153));
        jLabel2.setText("Carpetas");

        jSeparator1.setBackground(new java.awt.Color(153, 153, 153));
        jSeparator1.setForeground(new java.awt.Color(153, 153, 153));

        btnEliminarFolder.setBackground(new java.awt.Color(153, 153, 153));
        btnEliminarFolder.setEnabled(false);
        btnEliminarFolder.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminarFolder.setLabel("Eliminar");
        btnEliminarFolder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEliminarFolderMouseClicked(evt);
            }
        });

        btnCrearFolder.setBackground(new java.awt.Color(41, 168, 73));
        btnCrearFolder.setForeground(new java.awt.Color(255, 255, 255));
        btnCrearFolder.setLabel("Crear");
        btnCrearFolder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCrearFolderMouseClicked(evt);
            }
        });

        btnModificarFolder.setBackground(new java.awt.Color(153, 153, 153));
        btnModificarFolder.setEnabled(false);
        btnModificarFolder.setForeground(new java.awt.Color(255, 255, 255));
        btnModificarFolder.setLabel("Modificar");
        btnModificarFolder.setName(""); // NOI18N
        btnModificarFolder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnModificarFolderMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnEliminarFolder, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
                            .addComponent(btnModificarFolder, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
                            .addComponent(btnCrearFolder, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(77, 77, 77)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(btnCrearFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(btnModificarFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(btnEliminarFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        jPanel3.setForeground(new java.awt.Color(153, 153, 153));
        jPanel3.setToolTipText("");

        jLabel3.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(153, 153, 153));
        jLabel3.setText("Archivos");

        jSeparator2.setBackground(new java.awt.Color(153, 153, 153));

        btnEliminarArchivo.setBackground(new java.awt.Color(153, 153, 153));
        btnEliminarArchivo.setEnabled(false);
        btnEliminarArchivo.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminarArchivo.setLabel("Eliminar");
        btnEliminarArchivo.setName(""); // NOI18N
        btnEliminarArchivo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnEliminarArchivoMousePressed(evt);
            }
        });

        btnCrearArchivo.setBackground(new java.awt.Color(41, 168, 73));
        btnCrearArchivo.setForeground(new java.awt.Color(255, 255, 255));
        btnCrearArchivo.setLabel("Crear");
        btnCrearArchivo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnCrearArchivoMousePressed(evt);
            }
        });

        btnAbrirArchivo.setBackground(new java.awt.Color(153, 153, 153));
        btnAbrirArchivo.setEnabled(false);
        btnAbrirArchivo.setForeground(new java.awt.Color(255, 255, 255));
        btnAbrirArchivo.setLabel("Abrir");
        btnAbrirArchivo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnAbrirArchivoMousePressed(evt);
            }
        });

        btnCompartirArchivo.setBackground(new java.awt.Color(153, 153, 153));
        btnCompartirArchivo.setEnabled(false);
        btnCompartirArchivo.setForeground(new java.awt.Color(255, 255, 255));
        btnCompartirArchivo.setLabel("Compartir");
        btnCompartirArchivo.setName(""); // NOI18N
        btnCompartirArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompartirArchivoActionPerformed(evt);
            }
        });

        btnModificarArchivo.setBackground(new java.awt.Color(153, 153, 153));
        btnModificarArchivo.setEnabled(false);
        btnModificarArchivo.setForeground(new java.awt.Color(255, 255, 255));
        btnModificarArchivo.setLabel("Modificar");
        btnModificarArchivo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnModificarArchivoMousePressed(evt);
            }
        });

        btnDescargarArchivo.setBackground(new java.awt.Color(153, 153, 153));
        btnDescargarArchivo.setEnabled(false);
        btnDescargarArchivo.setForeground(new java.awt.Color(255, 255, 255));
        btnDescargarArchivo.setLabel("Descargar");
        btnDescargarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDescargarArchivoActionPerformed(evt);
            }
        });

        txtCarga.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        txtCarga.setForeground(new java.awt.Color(51, 51, 51));
        txtCarga.setText("Carga Masiva ...");
        txtCarga.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtCargaMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                txtCargaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                txtCargaMouseExited(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnAbrirArchivo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnEliminarArchivo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                            .addComponent(btnCrearArchivo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDescargarArchivo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(btnCompartirArchivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnModificarArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txtCarga, javax.swing.GroupLayout.Alignment.TRAILING))))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnDescargarArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtCarga))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCrearArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnModificarArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnEliminarArchivo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCompartirArchivo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addComponent(btnAbrirArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblUser)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnLogOff, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnLogOff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(lblUser)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void treeFoldersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treeFoldersMouseClicked

        TreeSelectionModel model = treeFolders.getSelectionModel();
        if (model.getSelectionCount() > 0) {
            selectedNode = (DefaultMutableTreeNode) treeFolders.getSelectionPath().getLastPathComponent();

            TreeNode[] path = selectedNode.getPath();
            String path_string = "";
            for (TreeNode node : path) {
                path_string += node.toString() + "/";
            }
            lbl.setText(path_string);

            if (path[path.length - 1].toString().contains(".")) {
                enabledFilesButtons();
                disabledAllFoldersButtons();
                btnCrearArchivo.setEnabled(false);
                btnCrearArchivo.setBackground(new Color(153, 153, 153));
            } else {
                enabledFoldersButtons();
                disabledAllFileButtons();
                btnCrearArchivo.setEnabled(true);
                btnCrearArchivo.setBackground(new Color(41, 168, 73));
            }

            if (lbl.getText().equals("/") || selectedNode.isRoot()) {
                disabledAllFoldersButtons();
                disabledAllFileButtons();
                btnCrearFolder.setEnabled(true);
                btnCrearFolder.setBackground(new Color(41, 168, 73));
                btnCrearArchivo.setEnabled(true);
                btnCrearArchivo.setBackground(new Color(41, 168, 73));
            }

        } else {
            disabledAllFoldersButtons();
            disabledAllFileButtons();
        }


    }//GEN-LAST:event_treeFoldersMouseClicked

    private void btnCrearFolderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCrearFolderMouseClicked

        //SOLICITO AL USUARIO EL NOMBRE DEL DIRECTORIO QUE DESEA CREAR
        String nombreNuevoFolder = JOptionPane.showInputDialog(null, "Nombre del Folder").replace(".", "");

        //VERIFICO QUE EL NOMBRE DEL FOLDER NO VENGA VACIO O EN BLANCO
        if (nombreNuevoFolder.isBlank() || nombreNuevoFolder.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No se puede agregar un directorio en blanco");
        } else {
            TreeNode[] path = selectedNode.getPath(); //OBTENGO LA RUTA DEL FOLDER EN DONDE VOY A CREAR EL NUEVO DIRECTORIO
            Directorio actual = Main.Main.user.getDirectorio(); //ME POSICIONO EN EL DIRECTORIO RAIZ DEL USUARIO Y LO GUARDO EN UNA VARIABLE QUE SE MODIFICARA HASTA LLEGAR AL DIRECTORIO DESEADO

            //UTILIZO UN FOR PARA PODER ACCEDER A CADA DIRECTORIO QUE TIENE LA VARIABLE PATH
            //LA VARIABLE ACTUAL SE VA MODIFICANDO OBTIENDO EL DIRECTORIO QUE SIGUE EN LA RUTA
            for (int i = 1; i < path.length; i++) {
                actual = actual.getDirectorio(path[i].toString());
            }

            //VERIFICO SI EL DIRECTORIO QUE DESEO AGREGAR EXISTE DENTRO DEL DIRECTORIO
            if (actual.getDirectorios().existe(nombreNuevoFolder)) {
                JOptionPane.showMessageDialog(null, "No puede agregar el directorio " + nombreNuevoFolder + ", porque ya existe dentro de " + actual.getNombre());
            } else {
                JOptionPane.showMessageDialog(null, "Se agrego exitosamente el directorio " + nombreNuevoFolder + " dentro de " + actual.getNombre());
                actual.addDirectorio(nombreNuevoFolder);//AGREGO AL DIRECTORIO EL NUEVO FOLDER
                bitacora.add(user.getUsuario(), "Agrego el directorio " + actual.getNombre() + "/" + nombreNuevoFolder);

                //CREAR CARPETA DENTRO DEL JTREE (PARTE VISUAL)
                DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(nombreNuevoFolder);
                selectedNode.add(newNode);

                DefaultTreeModel model = (DefaultTreeModel) treeFolders.getModel();
                model.reload();

                disabledAllFoldersButtons();
            }
        }

    }//GEN-LAST:event_btnCrearFolderMouseClicked

    private void btnModificarFolderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnModificarFolderMouseClicked
        //VERIFICO SI EL NODO SELECCIONADO NO ES LA RAIZ
        if (!lbl.getText().equals("/") && !selectedNode.isRoot()) {
            TreeNode[] path = selectedNode.getPath(); //OBTENGO LA RUTA COMPLETA DEL NODO SELECCIONADO
            String folderName = path[path.length - 1].toString(); //OBTENGO EL NOMBRE DE LA CARPETA ACTUAL

            //SOLICITO AL USUARIO EL NUEVO NOMBRE DE LA CARPETA
            String nombreNuevoFolder = JOptionPane.showInputDialog(null, "Ingresa el nombre del folder: ", folderName);

            //VERIFICO QUE EL NUEVO NOMBRE QUE EL USUARIO COLOCA, NO ESTE EN BLANCO Y QUE NO SEA EL MISMO
            if (!nombreNuevoFolder.isBlank() && !nombreNuevoFolder.equals(folderName)) {

                //CREO UNA VARIABLE DIRECTORIO QUE VA A OBTENER LOS DIRECTORIOS DEL USUARIO
                //Y EN ESTA VARIABLE SE VA A CONTROLAR EL ACCESO DE LAS CARPETAS DE LA RUTA
                Directorio actual = Main.Main.user.getDirectorio();

                //VOY ACCEDIENDO A CADA CARPETA DEL PATH Y LO VOY GUARDANDO DENTRO DE LA VARIABLE
                //actual Y ME DETENGO CUANDO LLEGUE A LA CARPETA PADRE DE LA CARPETA QUE DESEO MODIFICAR
                for (int i = 1; i < path.length - 1; i++) {
                    actual = actual.getDirectorio(path[i].toString());
                }

                //CREO UNA VARIABLE modificar QUE GUARDA EL ULTIMO DIRECTORIO DE LA RUTA QUE ES EL DIRECTORIO 
                //EN EL CUAL MODIFICAREMOS EL NOMBRE
                Directorio modificar = actual.getDirectorio(path[path.length - 1].toString());

                //VERIFICO SI EL DIRECTORIO PADRE TIENE OTRO FOLDER CON EL NOMBRE QUE DESEO QUE TENGA EL NUEVO
                if (actual.getDirectorios().existe(nombreNuevoFolder)) {
                    //SI YA EXISTE, MUESTRO UN MENSAJE DE ERROR
                    JOptionPane.showMessageDialog(null, "No se puede modificar el nombre del directorio " + folderName + ", porque ya existe dentro de " + actual.getNombre());
                } else {
                    //SI NO EXISTE, MUESTRO UN MENSAJE DE MODIFICACION
                    JOptionPane.showMessageDialog(null, "Se modifico exitosamente el directorio " + folderName + " ahora es " + actual.getNombre() + "/" + nombreNuevoFolder);
                    modificar.setNombre(nombreNuevoFolder); // MODIFICO EL NOMBRE DE LA CARPETA 
                    bitacora.add(user.getUsuario(), "Modifico Directorio " + folderName + " por " + nombreNuevoFolder);

                    //ACTUALIZO EL JTREE (PARTE VISUAL)EE
                    selectedNode.setUserObject(nombreNuevoFolder);
                    DefaultTreeModel model = (DefaultTreeModel) treeFolders.getModel();
                    model.reload();

                    disabledAllFoldersButtons();
                    disabledAllFileButtons();
                }
            }

        }
    }//GEN-LAST:event_btnModificarFolderMouseClicked

    private void btnEliminarFolderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEliminarFolderMouseClicked
        //VERIFICO QUE EL NODO QUE SE DESEA ELIMINAR NO SEA LA RAIZ
        if (!lbl.getText().equals("/") && !selectedNode.isRoot()) {
            TreeNode[] path = selectedNode.getPath(); //OBTENGO LA RUTA DEL JTREE DEL NODO SELECCIONADO
            String folderName = path[path.length - 1].toString(); //OBTENGO EL NOMBRE DEL FOLDER SELECCIONADO

            //SOLICITO SI SE DESEA ELIMINAR LA CARPETA
            int estasSeguro = JOptionPane.showConfirmDialog(null, "¿Seguro deseas eliminar " + folderName + "?", "Eliminar Carpeta", JOptionPane.YES_NO_OPTION);

            //SI LA RESPUESTA ES AFIRMATIVA SE PROCEDE A ELIMINAR EL NODO DEL GRADO DE DIRECTORIOS Y DE LA VISTA DEL JTREE
            if (estasSeguro == JOptionPane.OK_OPTION) {
                //ELIMINAR DEL JTREE (PARTE VISUAL)
                DefaultTreeModel model = (DefaultTreeModel) treeFolders.getModel();
                model.removeNodeFromParent(selectedNode);
                model.reload();

                selectedNode = (DefaultMutableTreeNode) treeFolders.getModel().getRoot();
                selectedNode = (DefaultMutableTreeNode) selectedNode.getRoot();

                disabledAllFoldersButtons();
                disabledAllFileButtons();

                //ELIMINAR DE GRAFO
                Directorio actual = Main.Main.user.getDirectorio();

                for (int i = 1; i < path.length - 1; i++) {
                    actual = actual.getDirectorio(path[i].toString());
                }
                actual.removeDirectorio(path[path.length - 1].toString());
                bitacora.add(user.getUsuario(), "Elimino Directorio " + path[path.length - 1].toString());
            }

        }
    }//GEN-LAST:event_btnEliminarFolderMouseClicked

    private void txtCargaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtCargaMouseEntered
        txtCarga.setForeground(new Color(41, 168, 73));
    }//GEN-LAST:event_txtCargaMouseEntered

    private void txtCargaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtCargaMouseExited
        txtCarga.setForeground(new Color(51, 51, 51));
    }//GEN-LAST:event_txtCargaMouseExited

    private void txtCargaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtCargaMouseClicked

        TreeNode[] path = selectedNode.getPath(); //OBTENGO LA RUTA DEL JTREE DEL NODO SELECCIONADO
        String folderName = "";

        if (path[path.length - 1].toString().contains(".")) {
            folderName = path[path.length - 2].toString();
        } else {
            folderName = path[path.length - 1].toString();
        }

        //ABRIR EL ARCHIVO CSV
        JFileChooser jfc = new JFileChooser();
        jfc.addChoosableFileFilter(new FileNameExtensionFilter("CSV File", "csv"));
        jfc.showOpenDialog(this);

        File f = jfc.getSelectedFile();

        if (f.exists() && f.getName().contains(".csv")) {

            try {
                FileReader fr = new FileReader(f.getAbsolutePath());
                BufferedReader br = new BufferedReader(fr);

                String line = "";
                String[] headers = br.readLine().toLowerCase().strip().replaceAll("[^!-~\\u20000-\\uFE1F\\uFF00-\\uFFEF]", "").split(",");


                if (headers.length == 2) {
                    String h1 = headers[0];
                    String h2 = headers[1];

                    if ((h1.equalsIgnoreCase("archivo") && h2.equalsIgnoreCase("contenido")) || (h2.equalsIgnoreCase("archivo")) && h1.equalsIgnoreCase("contenido")) {

                        Directorio actual = Main.Main.user.getDirectorio();

                        if (path[path.length - 1].toString().contains(".")) {
                            for (int i = 1; i < path.length - 1; i++) {
                                actual = actual.getDirectorio(path[i].toString());
                            }
                        } else {
                            for (int i = 1; i < path.length; i++) {
                                actual = actual.getDirectorio(path[i].toString());
                            }
                        }
                  
                        JOptionPane.showMessageDialog(null, "Se cargo el CSV");
                        actual.addArchivosCSV(f.getAbsolutePath());
                        bitacora.add(user.getUsuario(), "Agrego carga masiva con archivo " + f.getName());

                        DefaultTreeModel model = (DefaultTreeModel) treeFolders.getModel();
                        model.setRoot(directorioUsuario.getTreeRoot());
                        model.reload();

                        disabledAllFoldersButtons();
                        disabledAllFileButtons();
                        selectedNode = (DefaultMutableTreeNode) selectedNode.getRoot();
                        btnCrearFolder.setEnabled(true);
                        btnCrearFolder.setBackground(new Color(41, 168, 73));
                        btnCrearArchivo.setEnabled(true);
                        btnCrearArchivo.setBackground(new Color(41, 168, 73));
                    } else {
                        JOptionPane.showMessageDialog(null, "El archivo no cumple con la estructura solicitada, las columnas no son archivo y contenido");
                    }

                    br.close();
                    fr.close();
                } else {
                    JOptionPane.showMessageDialog(null, "El archivo no cumple con la estructura solicitada, tiene más de 2 columnas");
                }

            } catch (FileNotFoundException ex) {
                System.out.println("No se encontro el archivo");
            } catch (IOException ex) {
                System.out.println("No se pudo leer el archivo");
            }
//
        } else {
            JOptionPane.showMessageDialog(null, "Abra un archivo con extension csv");
        }

    }//GEN-LAST:event_txtCargaMouseClicked

    private void btnLogOffMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLogOffMouseClicked
        this.dispose();
        log.setVisible(true);
        bitacora.add(user.getUsuario(), "Cerro Sesion ");
    }//GEN-LAST:event_btnLogOffMouseClicked

    private void jPanel1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseReleased
        if (evt.isPopupTrigger()) {
            menuReports.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jPanel1MouseReleased

    private void optGraph1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_optGraph1MousePressed
        try {
            directorioUsuario.graficar();
            new Reporte("graph_" + user.getUsuario() + ".png").setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(UserDashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_optGraph1MousePressed

    private void optGraphBitacoraMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_optGraphBitacoraMousePressed
        try {
            bitacora.graph();
            new Reporte("stack.png").setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(UserDashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_optGraphBitacoraMousePressed

    private void opcReporteMatrizMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_opcReporteMatrizMousePressed
        try {
            directorioUsuario.graficarMatrizAdyacencia();
            new Reporte("matrix.png").setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(UserDashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_opcReporteMatrizMousePressed

    private void opcReporteHashMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_opcReporteHashMousePressed
        try {
            users.graph();
            new Reporte("hashTable.png").setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(UserDashboard.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(UserDashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_opcReporteHashMousePressed

    private void opcReporteArchivosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_opcReporteArchivosMousePressed

        try {
            TreeNode[] path = selectedNode.getPath(); //OBTENGO LA RUTA DEL FOLDER EN DONDE VOY A CREAR EL NUEVO DIRECTORIO
            Directorio actual = Main.Main.user.getDirectorio(); //ME POSICIONO EN EL DIRECTORIO RAIZ DEL USUARIO Y LO GUARDO EN UNA VARIABLE QUE SE MODIFICARA HASTA LLEGAR AL DIRECTORIO DESEADO

            //UTILIZO UN FOR PARA PODER ACCEDER A CADA DIRECTORIO QUE TIENE LA VARIABLE PATH
            //LA VARIABLE ACTUAL SE VA MODIFICANDO OBTIENDO EL DIRECTORIO QUE SIGUE EN LA RUTA,
            //SI EL ULTIMO NODO DE LA RUTA CONTIENE UN . QUIERE DECIR QUE ES UN ARCHIVO Y NOS QUEDAMOS
            //UN NODO ANTERIOR QUE SERIA EL FOLDER QUE LO CONTIENE
            if (path[path.length - 1].toString().contains(".")) {
                for (int i = 1; i < path.length - 1; i++) {
                    actual = actual.getDirectorio(path[i].toString());
                }
            } else {
                for (int i = 1; i < path.length; i++) {
                    actual = actual.getDirectorio(path[i].toString());
                }
            }

            actual.graficarArchivos();

            new Reporte("avl_" + user.getUsuario() + ".png").setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(UserDashboard.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_opcReporteArchivosMousePressed

    private void btnCrearArchivoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCrearArchivoMousePressed
        //SOLICITO AL USUARIO EL NOMBRE DEL ARCHIVO QUE DESEA CREAR
        String nombreNuevoArchivo = JOptionPane.showInputDialog(null, "Nombre del Archivo");

        //VERIFICO QUE EL NOMBRE DEL ARCHIVO NO VENGA VACIO O EN BLANCO
        if (nombreNuevoArchivo.isBlank() || nombreNuevoArchivo.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No se puede agregar un archivo sin nombre");
        } else {
            nombreNuevoArchivo = nombreNuevoArchivo.contains(".") ? nombreNuevoArchivo : nombreNuevoArchivo + ".txt";
            TreeNode[] path = selectedNode.getPath(); //OBTENGO LA RUTA DEL FOLDER EN DONDE VOY A CREAR EL NUEVO DIRECTORIO
            Directorio actual = Main.Main.user.getDirectorio(); //ME POSICIONO EN EL DIRECTORIO RAIZ DEL USUARIO Y LO GUARDO EN UNA VARIABLE QUE SE MODIFICARA HASTA LLEGAR AL DIRECTORIO DESEADO

            //UTILIZO UN FOR PARA PODER ACCEDER A CADA DIRECTORIO QUE TIENE LA VARIABLE PATH
            //LA VARIABLE ACTUAL SE VA MODIFICANDO OBTIENDO EL DIRECTORIO QUE SIGUE EN LA RUTA
            for (int i = 1; i < path.length; i++) {
                actual = actual.getDirectorio(path[i].toString());
            }

            //VERIFICO SI EL ARCHIVO QUE DESEO AGREGAR EXISTE DENTRO DEL DIRECTORIO
            if (actual.existeArchivo(nombreNuevoArchivo)) {
                Archivo a = actual.getArchivo(nombreNuevoArchivo);

                System.out.println("Tengo el archivo " + a.getNombre());
                System.out.println("El contenido del archivo es " + a.getContenido());

                int estasSeguro = JOptionPane.showConfirmDialog(null, "¿Deseas sobreescribir el archivo " + nombreNuevoArchivo + "?", "Crear Archivo", JOptionPane.YES_NO_OPTION);

                //SI LA RESPUESTA ES AFIRMATIVA SE PROCEDE A ELIMINAR EL NODO DEL GRADO DE DIRECTORIOS Y DE LA VISTA DEL JTREE
                if (estasSeguro == JOptionPane.OK_OPTION) {
                    a.setContenido("");
                    JOptionPane.showMessageDialog(null, "Se modifico el archivo " + nombreNuevoArchivo);
                }

            } else {
                JOptionPane.showMessageDialog(null, "Se agrego exitosamente el archivo " + nombreNuevoArchivo + " dentro de " + actual.getNombre());
                actual.addArchivo(nombreNuevoArchivo);//AGREGO AL DIRECTORIO EL ARCHIVO
                bitacora.add(user.getUsuario(), "Agrego el archivo " + nombreNuevoArchivo + "/" + path[path.length - 1]);

                //CREAR ARCHIVO DENTRO DEL JTREE (PARTE VISUAL)
                DefaultTreeModel model = (DefaultTreeModel) treeFolders.getModel();
                model.setRoot(directorioUsuario.getTreeRoot());
                model.reload();

                disabledAllFoldersButtons();
                disabledAllFileButtons();

                selectedNode = (DefaultMutableTreeNode) selectedNode.getRoot();
                btnCrearFolder.setEnabled(true);
                btnCrearFolder.setBackground(new Color(41, 168, 73));
                btnCrearArchivo.setEnabled(true);
                btnCrearArchivo.setBackground(new Color(41, 168, 73));
            }
        }


    }//GEN-LAST:event_btnCrearArchivoMousePressed

    private void btnEliminarArchivoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEliminarArchivoMousePressed
        //VERIFICO QUE EL NODO QUE SE DESEA ELIMINAR NO SEA LA RAIZ
        if (!selectedNode.isRoot()) {
            TreeNode[] path = selectedNode.getPath(); //OBTENGO LA RUTA DEL JTREE DEL NODO SELECCIONADO
            String fileName = path[path.length - 1].toString(); //OBTENGO EL NOMBRE DEL ARCHIVO SELECCIONADO
            String folderName = path[path.length - 2].toString(); //OBTENGO EL NOMBRE DEL ARCHIVO SELECCIONADO

            //SOLICITO SI SE DESEA ELIMINAR LA CARPETA
            int estasSeguro = JOptionPane.showConfirmDialog(null, "¿Seguro deseas eliminar " + fileName + "?", "Eliminar Archivo", JOptionPane.YES_NO_OPTION);

            //SI LA RESPUESTA ES AFIRMATIVA SE PROCEDE A ELIMINAR EL NODO DEL GRADO DE DIRECTORIOS Y DE LA VISTA DEL JTREE
            if (estasSeguro == JOptionPane.OK_OPTION) {
                //ELIMINAR DE GRAFO
                Directorio actual = Main.Main.user.getDirectorio();

                for (int i = 1; i < path.length - 1; i++) {
                    actual = actual.getDirectorio(path[i].toString());
                }

                actual.eliminarArchivo(fileName);
                bitacora.add(user.getUsuario(), "Elimino Archivo " + fileName + " dentro de " + folderName);

                //ACTUALIZAR EL JTREE (PARTE VISUAL)
                DefaultTreeModel model = (DefaultTreeModel) treeFolders.getModel();
                model.setRoot(directorioUsuario.getTreeRoot());
                model.reload();

                disabledAllFoldersButtons();
                disabledAllFileButtons();

                selectedNode = (DefaultMutableTreeNode) selectedNode.getRoot();
                btnCrearFolder.setEnabled(true);
                btnCrearFolder.setBackground(new Color(41, 168, 73));
                btnCrearArchivo.setEnabled(true);
                btnCrearArchivo.setBackground(new Color(41, 168, 73));
            }

        }
    }//GEN-LAST:event_btnEliminarArchivoMousePressed

    private void btnModificarArchivoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnModificarArchivoMousePressed

        TreeNode[] path = selectedNode.getPath(); //OBTENGO LA RUTA DEL FOLDER EN DONDE VOY A CREAR EL NUEVO DIRECTORIO
        Directorio actual = Main.Main.user.getDirectorio(); //ME POSICIONO EN EL DIRECTORIO RAIZ DEL USUARIO Y LO GUARDO EN UNA VARIABLE QUE SE MODIFICARA HASTA LLEGAR AL DIRECTORIO DESEADO
        String fileName = path[path.length - 1].toString(); //OBTENGO EL NOMBRE DEL ARCHIVO SELECCIONADO
        String folderName = path[path.length - 2].toString(); //OBTENGO EL NOMBRE DEL ARCHIVO SELECCIONADO

        //SOLICITO AL USUARIO EL NOMBRE DEL ARCHIVO QUE DESEA CREAR
        String nombreNuevoArchivo = JOptionPane.showInputDialog(null, "Ingresa el nombre del archivo: ", fileName);
        nombreNuevoArchivo = nombreNuevoArchivo.contains(".") ? nombreNuevoArchivo : nombreNuevoArchivo + ".txt";

        //VERIFICO QUE EL NOMBRE DEL ARCHIVO NO VENGA VACIO O EN BLANCO
        if (nombreNuevoArchivo.isBlank() || nombreNuevoArchivo.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No se puede modificar un archivo sin no tiene nombre");
        } else {
            nombreNuevoArchivo = nombreNuevoArchivo.contains(".") ? nombreNuevoArchivo : nombreNuevoArchivo + ".txt";

            //UTILIZO UN FOR PARA PODER ACCEDER A CADA DIRECTORIO QUE TIENE LA VARIABLE PATH
            //LA VARIABLE ACTUAL SE VA MODIFICANDO OBTIENDO EL DIRECTORIO QUE SIGUE EN LA RUTA
            for (int i = 1; i < path.length - 1; i++) {
                actual = actual.getDirectorio(path[i].toString());
            }

            if (!fileName.equals(nombreNuevoArchivo)) {
                //VERIFICO SI EL ARCHIVO QUE DESEO AGREGAR EXISTE DENTRO DEL DIRECTORIO
                if (actual.existeArchivo(nombreNuevoArchivo) && !fileName.equals(nombreNuevoArchivo)) {
                    Archivo modificar = actual.getArchivo(nombreNuevoArchivo);
                    Archivo actualArchivo = actual.getArchivo(fileName);

                    System.out.println("ARCHIVO ACTUAL -> " + actualArchivo.getNombre() + " contenido " + actualArchivo.getContenido());
                    System.out.println("ARCHIVO MODIFICAR -> " + modificar.getNombre() + " contenido " + modificar.getContenido());

                    int estasSeguro = JOptionPane.showConfirmDialog(null, "¿Deseas sobreescribir el archivo " + nombreNuevoArchivo + "?", "Modificar Archivo", JOptionPane.YES_NO_OPTION);

                    if (estasSeguro == JOptionPane.OK_OPTION) {
                        modificar.setContenido(actualArchivo.getContenido());
                        actual.eliminarArchivo(fileName);
                        JOptionPane.showMessageDialog(null, "Se modifico el archivo " + fileName + " correctamente por " + nombreNuevoArchivo);
                    }

                } else {
                    String contenidoArchivoActual = actual.getArchivo(fileName).getContenido();
                    actual.eliminarArchivo(fileName);
                    actual.addArchivo(nombreNuevoArchivo, contenidoArchivoActual);
                    bitacora.add(user.getUsuario(), "Modifico el archivo " + nombreNuevoArchivo + " dentro de " + folderName);
                    JOptionPane.showMessageDialog(null, "Se modifico exitosamente el archivo " + nombreNuevoArchivo + " dentro de " + actual.getNombre());
                }
            }

            //ACTUALIZAR EL JTREE (PARTE VISUAL)
            DefaultTreeModel model = (DefaultTreeModel) treeFolders.getModel();
            model.setRoot(directorioUsuario.getTreeRoot());
            model.reload();

            disabledAllFoldersButtons();
            disabledAllFileButtons();

            selectedNode = (DefaultMutableTreeNode) selectedNode.getRoot();
            btnCrearFolder.setEnabled(true);
            btnCrearFolder.setBackground(new Color(41, 168, 73));
            btnCrearArchivo.setEnabled(true);
            btnCrearArchivo.setBackground(new Color(41, 168, 73));

        }

    }//GEN-LAST:event_btnModificarArchivoMousePressed

    private void btnAbrirArchivoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAbrirArchivoMousePressed
        TreeNode[] path = selectedNode.getPath(); //OBTENGO LA RUTA DEL JTREE DEL NODO SELECCIONADO
        String fileName = path[path.length - 1].toString(); //OBTENGO EL NOMBRE DEL ARCHIVO SELECCIONADO
        String folderName = path[path.length - 2].toString(); //OBTENGO EL NOMBRE DEL ARCHIVO SELECCIONADO

        Directorio actual = Main.Main.user.getDirectorio();

        for (int i = 1; i < path.length - 1; i++) {
            actual = actual.getDirectorio(path[i].toString());
        }

        Archivo a = actual.getArchivo(fileName);
        bitacora.add(user.getUsuario(), "Abrio el archivo " + fileName);

        new Editor(a).setVisible(true);

    }//GEN-LAST:event_btnAbrirArchivoMousePressed

    private void btnDescargarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDescargarArchivoActionPerformed
        TreeNode[] path = selectedNode.getPath(); //OBTENGO LA RUTA DEL JTREE DEL NODO SELECCIONADO
        String fileName = path[path.length - 1].toString(); //OBTENGO EL NOMBRE DEL ARCHIVO SELECCIONADO
        String folderName = path[path.length - 2].toString(); //OBTENGO EL NOMBRE DEL ARCHIVO SELECCIONADO

        Directorio actual = Main.Main.user.getDirectorio();

        for (int i = 1; i < path.length - 2; i++) {
            actual = actual.getDirectorio(path[i].toString());
        }

        Archivo a = actual.getArchivo(fileName);

        JFileChooser downloadFile = new JFileChooser();
        downloadFile.setSelectedFile(new File(a.getNombre()));
        downloadFile.setDialogTitle("¿Donde desea guardar el archivo?");

        int userResponse = downloadFile.showSaveDialog(this);
        if (userResponse == JFileChooser.APPROVE_OPTION) {
            System.out.println(downloadFile.getSelectedFile().getAbsolutePath());
            try {
                FileWriter fw = new FileWriter(downloadFile.getSelectedFile().getAbsolutePath());
                fw.write(a.getContenido());
                fw.close();
                JOptionPane.showMessageDialog(null, "Archivo Guardado");
            } catch (IOException ex) {
                Logger.getLogger(UserDashboard.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        bitacora.add(user.getUsuario(), "Descargo el archivo " + fileName);
    }//GEN-LAST:event_btnDescargarArchivoActionPerformed

    private void btnCompartirArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompartirArchivoActionPerformed
        String usuarioDestino = JOptionPane.showInputDialog(null, "¿Escribe el nombre del usuario al que le deseas compartir el archivo?");

        if (usuarioDestino.isBlank() || usuarioDestino.equals(user.getUsuario())) {
            JOptionPane.showMessageDialog(null, "No se puede compartir el archivo");
        } else {
            if (users.exists(usuarioDestino)) {

                TreeNode[] path = selectedNode.getPath(); //OBTENGO LA RUTA DEL JTREE DEL NODO SELECCIONADO
                String fileName = path[path.length - 1].toString(); //OBTENGO EL NOMBRE DEL ARCHIVO SELECCIONADO

                Directorio actual = Main.Main.user.getDirectorio();

                for (int i = 1; i < path.length - 1; i++) {
                    actual = actual.getDirectorio(path[i].toString());
                }

                Archivo a = actual.getArchivo(fileName);
                System.out.println("split");
                Usuario u = users.getUsuario(usuarioDestino);

                if (u.getDirectorio().existeArchivo(a.getNombre())) {
                    Archivo au = u.getDirectorio().getArchivo(fileName);
                    u.getDirectorio().addArchivo("copy_" + user.getUsuario().toLowerCase() + "_" + au.getNombre(), a.getContenido());
                } else {
                    u.getDirectorio().addArchivo(a.getNombre(), a.getContenido());
                }

                JOptionPane.showMessageDialog(null, "Se ha compartido el archivo con " + u.getUsuario());
                bitacora.add(user.getUsuario(), "Compartio el archivo " + fileName + " con el usuario " + u.getUsuario());

            } else {
                JOptionPane.showMessageDialog(null, "El usuario no existe, verifica que este bien escrito");
            }
        }

    }//GEN-LAST:event_btnCompartirArchivoActionPerformed

    private void disabledAllFileButtons() {
        btnModificarArchivo.setEnabled(false);
        btnEliminarArchivo.setEnabled(false);
        btnCompartirArchivo.setEnabled(false);
        btnAbrirArchivo.setEnabled(false);
        btnDescargarArchivo.setEnabled(false);

        btnModificarArchivo.setBackground(new Color(153, 153, 153));
        btnEliminarArchivo.setBackground(new Color(153, 153, 153));
        btnCompartirArchivo.setBackground(new Color(153, 153, 153));
        btnAbrirArchivo.setBackground(new Color(153, 153, 153));
        btnDescargarArchivo.setBackground(new Color(153, 153, 153));
    }

    private void disabledAllFoldersButtons() {
        btnCrearFolder.setEnabled(false);
        btnModificarFolder.setEnabled(false);
        btnEliminarFolder.setEnabled(false);
        btnCrearFolder.setBackground(new Color(153, 153, 153));
        btnModificarFolder.setBackground(new Color(153, 153, 153));
        btnEliminarFolder.setBackground(new Color(153, 153, 153));
    }

    private void enabledFoldersButtons() {
        btnCrearFolder.setEnabled(true);
        btnModificarFolder.setEnabled(true);
        btnEliminarFolder.setEnabled(true);
        btnCrearFolder.setBackground(new Color(41, 168, 73));
        btnModificarFolder.setBackground(new Color(41, 168, 73));
        btnEliminarFolder.setBackground(new Color(41, 168, 73));
    }

    private void enabledFilesButtons() {
        btnModificarArchivo.setEnabled(true);
        btnEliminarArchivo.setEnabled(true);
        btnCompartirArchivo.setEnabled(true);
        btnAbrirArchivo.setEnabled(true);
        btnDescargarArchivo.setEnabled(true);

        btnModificarArchivo.setBackground(new Color(41, 168, 73));
        btnEliminarArchivo.setBackground(new Color(41, 168, 73));
        btnCompartirArchivo.setBackground(new Color(41, 168, 73));
        btnAbrirArchivo.setBackground(new Color(41, 168, 73));
        btnDescargarArchivo.setBackground(new Color(41, 168, 73));
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button btnAbrirArchivo;
    private java.awt.Button btnCompartirArchivo;
    private java.awt.Button btnCrearArchivo;
    private java.awt.Button btnCrearFolder;
    private java.awt.Button btnDescargarArchivo;
    private java.awt.Button btnEliminarArchivo;
    private java.awt.Button btnEliminarFolder;
    private java.awt.Button btnLogOff;
    private java.awt.Button btnModificarArchivo;
    private java.awt.Button btnModificarFolder;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lbl;
    private javax.swing.JLabel lblUser;
    private javax.swing.JPopupMenu menuReports;
    private javax.swing.JMenuItem opcReporteArchivos;
    private javax.swing.JMenuItem opcReporteHash;
    private javax.swing.JMenuItem opcReporteMatriz;
    private javax.swing.JMenuItem optGraph1;
    private javax.swing.JMenuItem optGraphBitacora;
    private javax.swing.JTree treeFolders;
    private javax.swing.JLabel txtCarga;
    // End of variables declaration//GEN-END:variables
}
